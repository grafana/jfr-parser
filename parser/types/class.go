// Code generated by gen/main.go. DO NOT EDIT.

package types

import (
	"fmt"

	"github.com/grafana/jfr-parser/parser/types/def"
	"github.com/grafana/jfr-parser/util"
)

type BindClass struct {
	Temp   Class
	Fields []BindFieldClass
}

type BindFieldClass struct {
	Field          *def.Field
	ClassLoaderRef *ClassLoaderRef
	SymbolRef      *SymbolRef
	PackageRef     *PackageRef
	uint32         *uint32
}

func NewBindClass(typ *def.Class, typeMap *def.TypeMap) *BindClass {
	res := new(BindClass)
	res.Fields = make([]BindFieldClass, 0, len(typ.Fields))
	for i := 0; i < len(typ.Fields); i++ {
		switch typ.Fields[i].Name {
		case "classLoader":
			res.Fields = append(res.Fields, BindFieldClass{Field: &typ.Fields[i]}) // skip to save mem
		case "name":
			if typ.Fields[i].Equals(&def.Field{Name: "name", Type: typeMap.T_SYMBOL, ConstantPool: true, Array: false}) {
				res.Fields = append(res.Fields, BindFieldClass{Field: &typ.Fields[i], SymbolRef: &res.Temp.Name})
			} else {
				res.Fields = append(res.Fields, BindFieldClass{Field: &typ.Fields[i]}) // skip changed field
			}
		case "package":
			res.Fields = append(res.Fields, BindFieldClass{Field: &typ.Fields[i]}) // skip to save mem
		case "modifiers":
			res.Fields = append(res.Fields, BindFieldClass{Field: &typ.Fields[i]}) // skip to save mem
		default:
			res.Fields = append(res.Fields, BindFieldClass{Field: &typ.Fields[i]}) // skip unknown new field
		}
	}
	return res
}

type ClassRef uint32
type ClassList struct {
	IDMap map[ClassRef]uint32
	Class []Class
}

type Class struct {
	// skip classLoader
	Name SymbolRef
	// skip package
	// skip modifiers
}

func (this *ClassList) Parse(data []byte, bind *BindClass, typeMap *def.TypeMap) (pos int, err error) {

	v32_, err := util.ParseVarInt(data, &pos)
	if err != nil {
		return 0, err
	}
	_ = v32_

	n := int(v32_)
	this.IDMap = make(map[ClassRef]uint32, n)
	this.Class = make([]Class, n)
	for i := 0; i < n; i++ {

		v32_, err := util.ParseVarInt(data, &pos)
		if err != nil {
			return 0, err
		}
		_ = v32_

		id := ClassRef(v32_)
		for bindFieldIndex := 0; bindFieldIndex < len(bind.Fields); bindFieldIndex++ {
			bindArraySize := 1
			if bind.Fields[bindFieldIndex].Field.Array {

				v32_, err := util.ParseVarInt(data, &pos)
				if err != nil {
					return 0, err
				}
				_ = v32_

				bindArraySize = int(v32_)
			}
			for bindArrayIndex := 0; bindArrayIndex < bindArraySize; bindArrayIndex++ {
				if bind.Fields[bindFieldIndex].Field.ConstantPool {

					v32_, err := util.ParseVarInt(data, &pos)
					if err != nil {
						return 0, err
					}
					_ = v32_

					switch bind.Fields[bindFieldIndex].Field.Type {
					case typeMap.T_CLASS_LOADER:
						if bind.Fields[bindFieldIndex].ClassLoaderRef != nil {
							*bind.Fields[bindFieldIndex].ClassLoaderRef = ClassLoaderRef(v32_)
						}
					case typeMap.T_SYMBOL:
						if bind.Fields[bindFieldIndex].SymbolRef != nil {
							*bind.Fields[bindFieldIndex].SymbolRef = SymbolRef(v32_)
						}
					case typeMap.T_PACKAGE:
						if bind.Fields[bindFieldIndex].PackageRef != nil {
							*bind.Fields[bindFieldIndex].PackageRef = PackageRef(v32_)
						}
					}
				} else {
					bindFieldTypeID := bind.Fields[bindFieldIndex].Field.Type
					switch bindFieldTypeID {
					case typeMap.T_STRING:

						s_, err := util.ParseString(data, &pos)
						if err != nil {
							return 0, err
						}
						_ = s_

						// skipping
					case typeMap.T_INT:

						v32_, err := util.ParseVarInt(data, &pos)
						if err != nil {
							return 0, err
						}
						_ = v32_

						if bind.Fields[bindFieldIndex].uint32 != nil {
							*bind.Fields[bindFieldIndex].uint32 = v32_
						}
					case typeMap.T_LONG:

						v64_, err := util.ParseVarLong(data, &pos)
						if err != nil {
							return 0, err
						}
						_ = v64_

						// skipping
					case typeMap.T_BOOLEAN:

						b_, err := util.ParseByte(data, &pos)
						if err != nil {
							return 0, err
						}
						_ = b_

						// skipping
					case typeMap.T_FLOAT:

						v32_, err := util.ParseVarInt(data, &pos)
						if err != nil {
							return 0, err
						}
						_ = v32_

						// skipping
					default:
						bindFieldType := typeMap.IDMap[bind.Fields[bindFieldIndex].Field.Type]
						if bindFieldType == nil || len(bindFieldType.Fields) == 0 {
							return 0, fmt.Errorf("unknown type %d", bind.Fields[bindFieldIndex].Field.Type)
						}
						bindSkipObjects := 1
						if bind.Fields[bindFieldIndex].Field.Array {

							v32_, err := util.ParseVarInt(data, &pos)
							if err != nil {
								return 0, err
							}
							_ = v32_

							bindSkipObjects = int(v32_)
						}
						for bindSkipObjectIndex := 0; bindSkipObjectIndex < bindSkipObjects; bindSkipObjectIndex++ {
							for bindskipFieldIndex := 0; bindskipFieldIndex < len(bindFieldType.Fields); bindskipFieldIndex++ {
								bindSkipFieldType := bindFieldType.Fields[bindskipFieldIndex].Type
								if bindFieldType.Fields[bindskipFieldIndex].ConstantPool {

									v32_, err := util.ParseVarInt(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = v32_

								} else if bindSkipFieldType == typeMap.T_STRING {

									s_, err := util.ParseString(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = s_

								} else if bindSkipFieldType == typeMap.T_INT {

									v32_, err := util.ParseVarInt(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = v32_

								} else if bindSkipFieldType == typeMap.T_FLOAT {

									v32_, err := util.ParseVarInt(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = v32_

								} else if bindSkipFieldType == typeMap.T_LONG {

									v64_, err := util.ParseVarLong(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = v64_

								} else if bindSkipFieldType == typeMap.T_BOOLEAN {

									b_, err := util.ParseByte(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = b_

								} else {
									return 0, fmt.Errorf("nested objects not implemented. ")
								}
							}
						}
					}
				}
			}
		}
		this.Class[i] = bind.Temp
		this.IDMap[id] = uint32(i)
	}
	return pos, nil
}
