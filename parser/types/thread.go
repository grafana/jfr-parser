// Code generated by gen/main.go. DO NOT EDIT.

package types

import (
	"fmt"

	"github.com/grafana/jfr-parser/parser/types/def"
	"github.com/grafana/jfr-parser/util"
)

type BindThread struct {
	Temp   Thread
	Fields []BindFieldThread
}

type BindFieldThread struct {
	Field  *def.Field
	string *string
	uint64 *uint64
}

func NewBindThread(typ *def.Class, typeMap *def.TypeMap) *BindThread {
	res := new(BindThread)
	res.Fields = make([]BindFieldThread, 0, len(typ.Fields))
	for i := 0; i < len(typ.Fields); i++ {
		switch typ.Fields[i].Name {
		case "osName":
			if typ.Fields[i].Equals(&def.Field{Name: "osName", Type: typeMap.T_STRING, ConstantPool: false, Array: false}) {
				res.Fields = append(res.Fields, BindFieldThread{Field: &typ.Fields[i], string: &res.Temp.OsName})
			} else {
				res.Fields = append(res.Fields, BindFieldThread{Field: &typ.Fields[i]}) // skip changed field
			}
		case "osThreadId":
			if typ.Fields[i].Equals(&def.Field{Name: "osThreadId", Type: typeMap.T_LONG, ConstantPool: false, Array: false}) {
				res.Fields = append(res.Fields, BindFieldThread{Field: &typ.Fields[i], uint64: &res.Temp.OsThreadId})
			} else {
				res.Fields = append(res.Fields, BindFieldThread{Field: &typ.Fields[i]}) // skip changed field
			}
		case "javaName":
			if typ.Fields[i].Equals(&def.Field{Name: "javaName", Type: typeMap.T_STRING, ConstantPool: false, Array: false}) {
				res.Fields = append(res.Fields, BindFieldThread{Field: &typ.Fields[i], string: &res.Temp.JavaName})
			} else {
				res.Fields = append(res.Fields, BindFieldThread{Field: &typ.Fields[i]}) // skip changed field
			}
		case "javaThreadId":
			if typ.Fields[i].Equals(&def.Field{Name: "javaThreadId", Type: typeMap.T_LONG, ConstantPool: false, Array: false}) {
				res.Fields = append(res.Fields, BindFieldThread{Field: &typ.Fields[i], uint64: &res.Temp.JavaThreadId})
			} else {
				res.Fields = append(res.Fields, BindFieldThread{Field: &typ.Fields[i]}) // skip changed field
			}
		default:
			res.Fields = append(res.Fields, BindFieldThread{Field: &typ.Fields[i]}) // skip unknown new field
		}
	}
	return res
}

type ThreadRef uint32
type ThreadList struct {
	IDMap  map[ThreadRef]uint32
	Thread []Thread
}

type Thread struct {
	OsName       string
	OsThreadId   uint64
	JavaName     string
	JavaThreadId uint64
}

func (this *ThreadList) Parse(data []byte, bind *BindThread, typeMap *def.TypeMap) (pos int, err error) {

	v32_, err := util.ParseVarInt(data, &pos)
	if err != nil {
		return 0, err
	}
	_ = v32_

	n := int(v32_)
	this.IDMap = make(map[ThreadRef]uint32, n)
	this.Thread = make([]Thread, n)
	for i := 0; i < n; i++ {

		v32_, err := util.ParseVarInt(data, &pos)
		if err != nil {
			return 0, err
		}
		_ = v32_

		id := ThreadRef(v32_)
		for bindFieldIndex := 0; bindFieldIndex < len(bind.Fields); bindFieldIndex++ {
			bindArraySize := 1
			if bind.Fields[bindFieldIndex].Field.Array {

				v32_, err := util.ParseVarInt(data, &pos)
				if err != nil {
					return 0, err
				}
				_ = v32_

				bindArraySize = int(v32_)
			}
			for bindArrayIndex := 0; bindArrayIndex < bindArraySize; bindArrayIndex++ {
				if bind.Fields[bindFieldIndex].Field.ConstantPool {

					v32_, err := util.ParseVarInt(data, &pos)
					if err != nil {
						return 0, err
					}
					_ = v32_

				} else {
					bindFieldTypeID := bind.Fields[bindFieldIndex].Field.Type
					switch bindFieldTypeID {
					case typeMap.T_STRING:

						s_, err := util.ParseString(data, &pos)
						if err != nil {
							return 0, err
						}
						_ = s_

						if bind.Fields[bindFieldIndex].string != nil {
							*bind.Fields[bindFieldIndex].string = s_
						}
					case typeMap.T_INT:

						v32_, err := util.ParseVarInt(data, &pos)
						if err != nil {
							return 0, err
						}
						_ = v32_

						// skipping
					case typeMap.T_LONG:

						v64_, err := util.ParseVarLong(data, &pos)
						if err != nil {
							return 0, err
						}
						_ = v64_

						if bind.Fields[bindFieldIndex].uint64 != nil {
							*bind.Fields[bindFieldIndex].uint64 = v64_
						}
					case typeMap.T_BOOLEAN:

						b_, err := util.ParseByte(data, &pos)
						if err != nil {
							return 0, err
						}
						_ = b_

						// skipping
					case typeMap.T_FLOAT:

						v32_, err := util.ParseVarInt(data, &pos)
						if err != nil {
							return 0, err
						}
						_ = v32_

						// skipping
					default:
						bindFieldType := typeMap.IDMap[bind.Fields[bindFieldIndex].Field.Type]
						if bindFieldType == nil || len(bindFieldType.Fields) == 0 {
							return 0, fmt.Errorf("unknown type %d", bind.Fields[bindFieldIndex].Field.Type)
						}
						bindSkipObjects := 1
						if bind.Fields[bindFieldIndex].Field.Array {

							v32_, err := util.ParseVarInt(data, &pos)
							if err != nil {
								return 0, err
							}
							_ = v32_

							bindSkipObjects = int(v32_)
						}
						for bindSkipObjectIndex := 0; bindSkipObjectIndex < bindSkipObjects; bindSkipObjectIndex++ {
							for bindskipFieldIndex := 0; bindskipFieldIndex < len(bindFieldType.Fields); bindskipFieldIndex++ {
								bindSkipFieldType := bindFieldType.Fields[bindskipFieldIndex].Type
								if bindFieldType.Fields[bindskipFieldIndex].ConstantPool {

									v32_, err := util.ParseVarInt(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = v32_

								} else if bindSkipFieldType == typeMap.T_STRING {

									s_, err := util.ParseString(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = s_

								} else if bindSkipFieldType == typeMap.T_INT {

									v32_, err := util.ParseVarInt(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = v32_

								} else if bindSkipFieldType == typeMap.T_FLOAT {

									v32_, err := util.ParseVarInt(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = v32_

								} else if bindSkipFieldType == typeMap.T_LONG {

									v64_, err := util.ParseVarLong(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = v64_

								} else if bindSkipFieldType == typeMap.T_BOOLEAN {

									b_, err := util.ParseByte(data, &pos)
									if err != nil {
										return 0, err
									}
									_ = b_

								} else {
									return 0, fmt.Errorf("nested objects not implemented. ")
								}
							}
						}
					}
				}
			}
		}
		this.Thread[i] = bind.Temp
		this.IDMap[id] = uint32(i)
	}
	return pos, nil
}
